db_posts = [
    {
        "title": "Post 1",
        "content": "Content 1",
        "published": True,
        "id": 1
    },
    {
        "title": "Post 2",
        "content": "Content 2",
        "published": False,
        "id": 2
    }
]


def find_post(id: int) -> dict:
    for post in db_posts:
        if post["id"] == id:
            return post


def find_index_post(id: int) -> int:
    for i, post in enumerate(db_posts):
        if post["id"] == id:
            return i


# @app.get("/posts/")
# def get_posts(db: Session = Depends(get_db), response_model=List[schemas.Post]):
#     posts = db.query(models.Post).all()
#     return posts


# @app.post("/posts/", status_code=status.HTTP_201_CREATED, response_model=schemas.Post)
# def create_post(post: schemas.PostCreate, db: Session = Depends(get_db)):
#     new_post = models.Post(
#         **post.dict()
#         )
#     db.add(new_post)
#     db.commit()
#     db.refresh(new_post)
#     return new_post


# @app.get("/posts/{id}/", response_model=schemas.Post)
# def get_post(id: int, response: Response, db: Session = Depends(get_db)):
#     post = db.query(models.Post).filter(models.Post.id == str(id)).first()
#     if not post:
#         raise HTTPException(
#             status_code=status.HTTP_404_NOT_FOUND, 
#             detail=f"Post with id: {id} was not found."
#             )
#     return post


# @app.put("/posts/{id}/", response_model=schemas.Post)
# def update_post(id: int, post: schemas.PostCreate, db: Session = Depends(get_db)):
#     post_query = db.query(models.Post).filter(models.Post.id == str(id))
#     if post_query.first() is None:
#         raise HTTPException(
#             status_code=status.HTTP_404_NOT_FOUND, 
#             detail=f"Post with id: {id} was not found."
#             )
#     post_query.update(post.dict(), synchronize_session=False)
#     db.commit()
#     return post_query.first()


# @app.patch("/posts/{id}/")
# def patch_post():
#     return {"data": "Getting your posts"}


# @app.delete("/posts/{id}/", status_code=status.HTTP_204_NO_CONTENT)
# def delete_post(id: int, db: Session = Depends(get_db)):
#     post = db.query(models.Post).filter(models.Post.id == str(id))
#     if post.first() is None:
#         raise HTTPException(
#             status_code=status.HTTP_404_NOT_FOUND,
#             detail=f"Post with id: {id} was not found."
#         )
#     post.delete(synchronize_session=False)
#     db.commit()
#     return Response(status_code=status.HTTP_204_NO_CONTENT)


# @app.post("/users/", status_code=status.HTTP_201_CREATED, response_model=schemas.User)
# def create_user(user: schemas.UserCreate, db: Session = Depends(get_db)):
#     # Hash the password
#     user.password = utils.hash(user.password)

#     new_user = models.User(**user.dict())
#     db.add(new_user)
#     db.commit()
#     db.refresh(new_user)
    
#     return new_user


# @app.get("/users/{id}", response_model=schemas.User)
# def get_user(id: int, db: Session = Depends(get_db)):
#     user = db.query(models.User).filter(models.User.id == id).first()
#     if not user:
#         raise HTTPException(
#             status_code=status.HTTP_404_NOT_FOUND,
#             detail=f"User with id: {id} was not found."
#         )
#     return user
